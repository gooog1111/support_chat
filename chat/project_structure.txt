
mysite.my\chat\admin


mysite.my\chat\admin_online


mysite.my\chat\assets


mysite.my\chat\chats


mysite.my\chat\client


mysite.my\chat\clients


mysite.my\chat\includes


mysite.my\chat\logs


mysite.my\chat\uploads


mysite.my\chat\favicon.ico [Пропущено по расширению]


mysite.my\chat\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\admin\clear_chat.php

Содержимое файла clear_chat.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';

if (!isset($_SESSION['admin_logged_in'])) {
    echo json_encode(['success' => false, 'error' => 'Доступ запрещен.']);
    exit();
}
updateAdminOnlineStatus($_SESSION['admin_username']);
$chatId = sanitizeInput($_GET['id']);
if (clearChat($chatId)) {
    echo json_encode(['success' => true]);
} else {
    echo json_encode(['success' => false, 'error' => 'Ошибка при очистке чата.']);
}
?>



mysite.my\chat\admin\close_chat.php

Содержимое файла close_chat.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';

// Проверка авторизации
if (!isset($_SESSION['admin_logged_in'])) {
    echo json_encode(['success' => false, 'error' => 'Доступ запрещен.']);
    exit();
}
updateAdminOnlineStatus($_SESSION['admin_username']);
// Проверка ID чата
$chatId = sanitizeInput($_GET['id']);
if (!$chatId || !file_exists(CLIENTS_DIR . "$chatId.json")) {
    echo json_encode(['success' => false, 'error' => 'Чат не найден.']);
    exit();
}

// Закрытие чата
if (closeChat($chatId, $_SESSION['admin_name'])) {
    // Добавляем системное сообщение
    saveMessage($chatId, "({$_SESSION['admin_name']}) вышел из чата.", true, null, $_SESSION['admin_name']);
    echo json_encode(['success' => true]);
} else {
    echo json_encode(['success' => false, 'error' => 'Ошибка при закрытии чата.']);
}
?>




mysite.my\chat\admin\dashboard.php

Содержимое файла dashboard.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';
require_once '../includes/upload_functions.php';

if (!isset($_SESSION['admin_logged_in'])) {
    header("Location: login.php");
    exit();
}
updateAdminOnlineStatus($_SESSION['admin_username']);
// Загрузка всех чатов для списка
$chats = [];
foreach (glob(CLIENTS_DIR . "*.json") as $clientFile) {
    $chatId = basename($clientFile, '.json');
    $clientInfo = json_decode(file_get_contents($clientFile), true);

    $messagesFile = CHATS_DIR . $chatId . '.json';
    $messages = file_exists($messagesFile) ? getMessages($chatId) : [];

    // В обоих файлах заменить строку с подсчетом непрочитанных:
$unreadMessages = count(array_filter($messages, function($msg) use ($clientInfo) {
    return !$msg['isAdmin'] && 
           (!isset($clientInfo['last_admin_view']) || 
            strtotime($msg['time']) > strtotime($clientInfo['last_admin_view']));
}));

    $chats[] = [
        'id' => $chatId,
        'info' => $clientInfo,
        'status' => $clientInfo['status'] ?? 'open',
        'last_activity' => $clientInfo['last_activity'] ?? end($messages)['time'] ?? 'Нет данных',
        'unread' => $unreadMessages,
    ];
}

usort($chats, fn($a, $b) => strtotime($b['last_activity']) <=> strtotime($a['last_activity']));
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Панель администратора</title>
    <link rel="stylesheet" href="../assets/css/admin.css">
	<link rel="stylesheet" href="../assets/css/all.min.css">
    <script src="../assets/js/admin.js" defer></script>
	<audio id="notificationSound" src="../assets/sounds/notification.mp3" preload="auto"></audio>
</head>
<body>
<header class="admin-header">
    <div class="admin-info">
        <h1><?= htmlspecialchars($_SESSION['admin_name']) ?></h1>
        <p><?= htmlspecialchars($_SESSION['admin_username']) ?></p>
    </div>
<div class="admin-actions">
    <button onclick="updateHostnames()" class="btn btn-warning">
        <i class="fas fa-sync-alt"></i>
        <span>Обновить имена ПК</span>
    </button>
</div>
<button id="enableNotificationsBtn" class="btn btn-info">
    <i class="fas fa-bell"></i> Разрешить уведомления и звук
</button>
    <a href="update_profile.php" class="btn profile-link">Изменить профиль</a>
    <a href="logout.php" class="btn logout">Выход</a>
</header>
    <div class="dashboard-container">
        <div class="chat-list-container">
            <h2>Список чатов</h2>
            <div class="chat-list">
                <?php foreach ($chats as $chat): ?>
    <div class="chat-item <?= htmlspecialchars($chat['status']) ?>" data-chat-id="<?= htmlspecialchars($chat['id']) ?>">
        <?php
        $fields = [
            'Клиент' => $chat['info']['name'] ?? 'Неизвестный',
            'IP' => $chat['info']['ip'] ?? 'Неизвестный',
            'Имя ПК' => $chat['info']['hostname'] ?? 'Не определено',
            'Статус' => $chat['status'],
            'Последняя активность' => $chat['last_activity'],
            'Непрочитанные сообщения' => $chat['unread']
        ];

        foreach ($fields as $label => $value): ?>
            <p><strong><?= htmlspecialchars($label) ?>:</strong> <?= htmlspecialchars($value) ?></p>
        <?php endforeach; ?>
    </div>
<?php endforeach; ?>
            </div>
        </div>

        <div id="chat-container" class="chat-container">
            <h2>Чат с клиентом</h2>
            <!-- Контейнер для сообщений -->
            <div id="chat-messages" class="chat-messages"></div>
            
            <!-- Контейнер для управления чатом -->
            <div class="chat-controls">
                <form id="chat-form" method="post" enctype="multipart/form-data">
                    <textarea name="message" placeholder="Введите сообщение"></textarea>
                    <input type="file" name="image">
                    <button type="submit" class="btn">Отправить</button>
                </form>
                <div class="chat-actions">
                    <button onclick="updateChatStatus('в работе', '<?= htmlspecialchars($_SESSION['admin_name']) ?>')" class="btn">В работе</button>
                    <button onclick="closeChat()" class="btn btn-danger">Закрыть чат</button>
                    <button onclick="clearChat()" class="btn btn-danger">Очистить чат</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Модальное окно для просмотра изображений -->
    <div id="imageModal" class="modal">
        <span class="close">&times;</span>
        <img class="modal-content" id="modalImage">
        <div id="caption"></div>
    </div>
</body>
</html>




mysite.my\chat\admin\get_chat_list.php

Содержимое файла get_chat_list.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/storage.php';

if (!isset($_SESSION['admin_logged_in'])) {
    http_response_code(403);
    exit(json_encode(['success' => false, 'error' => 'Доступ запрещен.']));
}

$chats = [];
foreach (glob(CLIENTS_DIR . "*.json") as $clientFile) {
    $chatId = basename($clientFile, '.json');
    $clientInfo = json_decode(file_get_contents($clientFile), true);

    $messagesFile = CHATS_DIR . "$chatId.json";
    $messages = file_exists($messagesFile) ? getMessages($chatId) : [];

    $status = $clientInfo['status'] ?? 'open';
    // В обоих файлах заменить строку с подсчетом непрочитанных:
$unreadMessages = count(array_filter($messages, function($msg) use ($clientInfo) {
    return !$msg['isAdmin'] && 
           (!isset($clientInfo['last_admin_view']) || 
            strtotime($msg['time']) > strtotime($clientInfo['last_admin_view']));
}));

    $chats[] = [
        'id' => $chatId,
        'info' => $clientInfo,
        'status' => $status,
        'last_activity' => $clientInfo['last_activity'] ?? end($messages)['time'] ?? 'Нет данных',
        'unread' => $unreadMessages,
    ];
}

usort($chats, fn($a, $b) => strtotime($b['last_activity']) <=> strtotime($a['last_activity']));

header('Content-Type: text/html');
foreach ($chats as $chat): ?>
    <div class="chat-item <?= htmlspecialchars($chat['status']) ?>" data-chat-id="<?= htmlspecialchars($chat['id']) ?>">
        <?php
        $fields = [
            'Клиент' => $chat['info']['name'] ?? 'Неизвестный',
            'IP' => $chat['info']['ip'] ?? 'Неизвестный',
            'Имя ПК' => $chat['info']['hostname'] ?? 'Не определено',
            'Статус' => $chat['status'],
            'Последняя активность' => $chat['last_activity'],
            'Непрочитанные сообщения' => $chat['unread']
        ];

        foreach ($fields as $label => $value): ?>
            <p><strong><?= htmlspecialchars($label) ?>:</strong> <?= htmlspecialchars($value) ?></p>
        <?php endforeach; ?>
    </div>
<?php endforeach; ?>



mysite.my\chat\admin\get_messages.php

Содержимое файла get_messages.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';

// Проверка авторизации
if (!isset($_SESSION['admin_logged_in'])) {
    http_response_code(403); // Доступ запрещен
    echo json_encode(['error' => 'Доступ запрещен. Пожалуйста, войдите в систему.']);
    exit();
}

// Проверка ID чата
$chatId = sanitizeInput($_GET['id']);
if (!$chatId || !file_exists(CHATS_DIR . "$chatId.json")) {
    http_response_code(404);
    echo json_encode(['error' => 'Чат не найден.']);
    exit();
}
updateLastViewTime($chatId);

// Возвращение сообщений
header('Content-Type: application/json');
try {
    $messages = getMessages($chatId);
    // Добавляем chatId к каждому сообщению
    $messages = array_map(function($msg) use ($chatId) {
        $msg['chatId'] = $chatId;
        return $msg;
    }, $messages);
    echo json_encode($messages);
} catch (Exception $e) {
    http_response_code(500); // Внутренняя ошибка сервера
    echo json_encode(['error' => 'Ошибка при получении сообщений.']);
}
?>



mysite.my\chat\admin\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
header("Location: login.php");
exit();
?>



mysite.my\chat\admin\login.php

Содержимое файла login.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';

$error = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $username = sanitizeInput($_POST['username']);
    $password = sanitizeInput($_POST['password']);

    // Проверка логина и пароля
    if (isset($ADMINS[$username]) && password_verify($password, $ADMINS[$username]['password'])) {
        $_SESSION['admin_logged_in'] = true;
        $_SESSION['admin_username'] = $username;
        $_SESSION['admin_name'] = $ADMINS[$username]['name'];
        $_SESSION['login_attempts'] = 0; // Сброс попыток

        header("Location: dashboard.php");
        exit();
    } else {
        // Обновление количества попыток
        $_SESSION['login_attempts'] = ($_SESSION['login_attempts'] ?? 0) + 1;

        if ($_SESSION['login_attempts'] >= 3) {
            $error = "Превышено количество попыток входа. Попробуйте позже.";
        } else {
            $remaining = 3 - $_SESSION['login_attempts'];
            $error = "Неверный логин или пароль. Осталось попыток: $remaining.";
        }
    }
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Вход для администратора</title>
    <link rel="stylesheet" href="../assets/css/admin.css">
</head>
<body>
    <div class="login-form">
        <h2>Вход для администратора</h2>
        <?php if (!empty($error)): ?>
            <p class="error"><?= htmlspecialchars($error) ?></p>
        <?php endif; ?>
        <form method="post">
            <label for="username">Логин:</label>
            <input type="text" id="username" name="username" required>

            <label for="password">Пароль:</label>
            <input type="password" id="password" name="password" required>

            <button type="submit">Войти</button>
        </form>
    </div>
</body>
</html>




mysite.my\chat\admin\logout.php

Содержимое файла logout.php:
<?php
session_start();

// Уничтожаем только данные сессии администратора
session_unset(); // Очищаем данные текущей сессии
session_destroy(); // Уничтожаем сессию

// Перенаправляем на страницу входа
header("Location: login.php");
exit();




mysite.my\chat\admin\send_message.php

Содержимое файла send_message.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';
require_once '../includes/upload_functions.php';

header('Content-Type: application/json');

// Проверка авторизации администратора
if (!isset($_SESSION['admin_logged_in'])) {
    echo json_encode(['success' => false, 'error' => 'Доступ запрещен.']);
    exit();
}
updateAdminOnlineStatus($_SESSION['admin_username']);
// Проверка ID чата
$chatId = sanitizeInput($_POST['chatId'] ?? '');
if (!$chatId || !file_exists(CHATS_DIR . "$chatId.json")) {
    echo json_encode(['success' => false, 'error' => 'Чат не найден.']);
    exit();
}

// Проверка наличия сообщения или изображения
$message = sanitizeInput($_POST['message'] ?? '');
$image = null;

if (empty($message) && empty($_FILES['image']['name'])) {
    echo json_encode(['success' => false, 'error' => 'Пожалуйста, введите сообщение или выберите изображение.']);
    exit();
}

// Обработка изображения, если оно есть
if (!empty($_FILES['image']['name']) && $_FILES['image']['error'] === UPLOAD_ERR_OK) {
    $image = handleFileUpload($_FILES['image']);
    if (!$image) {
        echo json_encode(['success' => false, 'error' => 'Ошибка загрузки изображения.']);
        exit();
    }
}

// Сохранение сообщения
if (!saveMessage($chatId, $message, true, $image, $_SESSION['admin_name'])) {
    echo json_encode(['success' => false, 'error' => 'Ошибка при сохранении сообщения.']);
    exit();
}

// Возвращаем успех
echo json_encode(['success' => true, 'image' => $image]);
exit();
?>




mysite.my\chat\admin\update_chat_status.php

Содержимое файла update_chat_status.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';

header('Content-Type: application/json');

if (!isset($_SESSION['admin_logged_in'])) {
    echo json_encode(['success' => false, 'error' => 'Доступ запрещен.']);
    exit();
}
updateAdminOnlineStatus($_SESSION['admin_username']);
$chatId = sanitizeInput($_GET['id'] ?? '');
$status = sanitizeInput($_GET['status'] ?? '');
$adminName = sanitizeInput($_GET['admin'] ?? '');

if (!$chatId || !$status) {
    echo json_encode(['success' => false, 'error' => 'Отсутствуют обязательные параметры.']);
    exit();
}

if (updateChatStatus($chatId, $status, $adminName)) {
    echo json_encode(['success' => true]);
} else {
    echo json_encode(['success' => false, 'error' => 'Ошибка обновления статуса.']);
}
exit();
?>




mysite.my\chat\admin\update_hostnames.php

Содержимое файла update_hostnames.php:
<?php
header("Access-Control-Allow-Origin: *");
require_once __DIR__ . '/../includes/config.php';
require_once __DIR__ . '/../includes/functions.php';

// Локальная настройка для этого скрипта
$FORCE_DNS_LOOKUP = true; // Игнорируем DISABLE_DNS_LOOKUP из config.php

error_log("[Hostname Updater] Starting process...");

foreach (glob(CLIENTS_DIR . "*.json") as $file) {
    try {
        $data = json_decode(file_get_contents($file), true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            throw new Exception("Invalid JSON: " . json_last_error_msg());
        }

        // Пропускаем файлы без IP
        if (empty($data['ip'])) {
            error_log("[Hostname Updater] Skipping $file - no IP address");
            continue;
        }

        // Всегда обновляем hostname, если включено принудительное обновление
        $newHostname = $FORCE_DNS_LOOKUP 
            ? (@gethostbyaddr($data['ip']) ?: 'Неизвестный хост')
            : ($data['hostname'] ?? 'Неизвестный хост');

        // Защита от рекурсивных записей
        if ($newHostname === $data['ip']) {
            $newHostname = 'Неизвестный хост';
        }

        // Обновляем только при изменении
        if ($newHostname !== ($data['hostname'] ?? null)) {
            $data['hostname'] = $newHostname;
            file_put_contents($file, json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            error_log("[Hostname Updater] Обновлено $file: " . $newHostname);
        }
    } catch (Exception $e) {
        error_log("[Hostname Updater] Ошибка в $file: " . $e->getMessage());
    }
}

echo "Имена ПК обновлены!";
?>



mysite.my\chat\admin\update_profile.php

Содержимое файла update_profile.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';

if (!isset($_SESSION['admin_logged_in'])) {
    header("Location: login.php");
    exit();
}

$error = '';
$success = '';

// Обработка смены имени
if (isset($_POST['update_name'])) {
    $newName = sanitizeInput($_POST['name']);
    if (!empty($newName)) {
        $_SESSION['admin_name'] = $newName;
        $ADMINS[$_SESSION['admin_username']]['name'] = $newName;

        // Сохранение изменений в файле admins.php
        $adminsFile = '../includes/admins.php';
        $adminsContent = '<?php $ADMINS = ' . var_export($ADMINS, true) . '; ?>';
        if (file_put_contents($adminsFile, $adminsContent) !== false) {
            $success = "Имя успешно обновлено.";
        } else {
            $error = "Ошибка при сохранении имени.";
        }
    } else {
        $error = "Имя не может быть пустым.";
    }
}

// Обработка смены пароля
if (isset($_POST['update_password'])) {
    $newPassword = sanitizeInput($_POST['password']);
    $confirmPassword = sanitizeInput($_POST['confirm_password']);

    if (!empty($newPassword) && $newPassword === $confirmPassword) {
        $ADMINS[$_SESSION['admin_username']]['password'] = password_hash($newPassword, PASSWORD_DEFAULT);

        // Сохранение изменений в файле admins.php
        $adminsFile = '../includes/admins.php';
        $adminsContent = '<?php $ADMINS = ' . var_export($ADMINS, true) . '; ?>';
        if (file_put_contents($adminsFile, $adminsContent) !== false) {
            // Завершаем сессию и перенаправляем на вход
            session_destroy();
            header("Location: login.php?message=Пароль успешно обновлён, войдите снова.");
            exit();
        } else {
            $error = "Ошибка при сохранении пароля.";
        }
    } else {
        $error = "Пароли не совпадают или пусты.";
    }
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Обновить профиль</title>
    <link rel="stylesheet" href="../assets/css/admin.css">
</head>
<body>
    <div class="update-profile">
        <h2>Обновить профиль</h2>
        <?php if ($error): ?>
            <p class="error"><?= htmlspecialchars($error) ?></p>
        <?php endif; ?>
        <?php if ($success): ?>
            <p class="success"><?= htmlspecialchars($success) ?></p>
        <?php endif; ?>

        <!-- Форма для смены имени -->
        <form method="post">
            <h3>Сменить имя</h3>
            <label for="name">Имя:</label>
            <input type="text" id="name" name="name" value="<?= htmlspecialchars($_SESSION['admin_name']) ?>" required>
            <button type="submit" name="update_name" class="btn">Обновить имя</button>
        </form>

        <!-- Форма для смены пароля -->
        <form method="post" style="margin-top: 20px;">
            <h3>Сменить пароль</h3>
            <label for="password">Новый пароль:</label>
            <input type="password" id="password" name="password" required>
            <label for="confirm_password">Подтвердите пароль:</label>
            <input type="password" id="confirm_password" name="confirm_password" required>
            <button type="submit" name="update_password" class="btn">Обновить пароль</button>
        </form>

        <a href="dashboard.php" class="btn back-btn">Вернуться на дашборд</a>
    </div>
</body>
</html>




mysite.my\chat\admin_online\c84258e9c39059a89ab77d846ddab909.txt

Содержимое файла c84258e9c39059a89ab77d846ddab909.txt:
1742499855



mysite.my\chat\admin_online\e00cf25ad42683b3df678c61f42c6bda.txt

Содержимое файла e00cf25ad42683b3df678c61f42c6bda.txt:
1742497010



mysite.my\chat\admin_online\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\assets\css


mysite.my\chat\assets\images


mysite.my\chat\assets\js


mysite.my\chat\assets\sounds


mysite.my\chat\assets\webfonts


mysite.my\chat\assets\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\assets\css\admin.css

Содержимое файла admin.css:
/* Общие настройки */
body, html {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: Arial, sans-serif;
    display: flex;
    flex-direction: column;
    background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%);
}

/* Заголовок */
.admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: linear-gradient(90deg, #4b79a1, #283e51);
    padding: 10px 20px;
    color: #ecf0f1;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.admin-header .admin-info {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    flex-grow: 1;
}

.admin-header h1 {
    margin: 0;
    font-size: 1.5em;
    font-weight: bold;
}

.admin-header p {
    margin: 0;
    font-size: 0.9em;
    color: #bdc3c7;
}

.admin-header .btn.logout {
    background-color: #e74c3c;
    padding: 8px 16px;
    border-radius: 5px;
    text-decoration: none;
    color: white;
    transition: background-color 0.3s;
}

.admin-header .btn.logout:hover {
    background-color: #c0392b;
}

.admin-header .btn.profile-link {
    margin-left: auto; /* Перемещает кнопку вправо */
    margin-right: 10px; /* Отступ от кнопки "Выход" */
    background-color: #3498db;
    color: #fff;
    padding: 8px 16px;
    border-radius: 5px;
    text-decoration: none;
    transition: background-color 0.3s ease;
}

.admin-header .btn.profile-link:hover {
    background-color: #2980b9;
}

/* Основной контейнер */
.dashboard-container {
    flex: 1;
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 20px;
    padding: 20px;
    height: calc(100% - 60px);
    overflow: hidden;
}

/* Список чатов */
.chat-list-container {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    height: 100%;
}

.chat-list-container h2 {
    margin: 0 0 10px;
    font-size: 1.2em;
    padding: 10px;
    border-bottom: 1px solid #ddd;
}

/* Карточки чатов */
.chat-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 10px;
}

.chat-item {
    padding: 15px;
    border-radius: 12px;
	box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
    cursor: pointer;
    transition: background-color 0.2s, border-left-color 0.2s;
    border-left: 5px solid transparent;
    background: #f9f9f9;
}

.chat-item:hover {
    background: #ececec;
}

.chat-item.Открыт {
    border-left: 5px solid #27ae60;
}

.chat-item.Закрыт {
    border-left: 5px solid #e74c3c;
}

.chat-item.в {
    border-left: 5px solid #3498db;
}

/* Чат */
.chat-container {
    display: flex;
    flex-direction: column;
    height: 100%;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
    box-sizing: border-box;
    overflow-x: hidden; /* Убрана горизонтальная прокрутка */
}

/* Контейнер для сообщений */
.chat-messages {
    flex-grow: 1;
    overflow-y: auto;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    background: #f9f9f9;
    margin-bottom: 20px; /* Отступ от управления */
}

/* Контейнер для управления чатом */
.chat-controls {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

/* Форма отправки */
#chat-form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

#chat-form textarea {
    resize: none;
    width: calk (98% - 10px);
    height: 80px;
    border-radius: 5px;
    border: 1px solid #ccc;
    padding: 10px;
}

#chat-form input[type="file"] {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

#chat-form button {
    background-color: #3498db;
    color: white;
    padding: 10px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
}

#chat-form button:hover {
    background-color: #2980b9;
}

/* Кнопки управления */
.chat-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

.chat-actions button {
    flex-grow: 1;
    background-color: #3498db;
    color: white;
    padding: 10px 15px;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.chat-actions button:focus {
    outline: none;
    box-shadow: none;
}

.chat-actions button:hover {
    background-color: #2980b9;
}
#chat-messages {
    flex-grow: 1;
    overflow-y: auto; /* Включаем вертикальную прокрутку */
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    background: #f9f9f9;
    margin-bottom: 20px;
    height: 400px; /* Фиксированная высота для контейнера */
    scroll-behavior: smooth; /* Плавная прокрутка */
}
/* Сообщения */
#chat-messages .admin {
    background-color: #dff9fb;
    border-left: 5px solid #3498db;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
}

#chat-messages .client {
    background-color: #f1f1f1;
    border-left: 5px solid #27ae60;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
}

/* Стили для обновления профиля */
.update-profile {
    max-width: 500px;
    margin: 50px auto;
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

.update-profile h2 {
    text-align: center;
    color: #2c3e50;
    margin-bottom: 20px;
}

.update-profile h3 {
    color: #3498db;
    margin-bottom: 15px;
}

.update-profile form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.update-profile label {
    font-weight: bold;
    color: #333;
}

.update-profile input {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 14px;
}

.update-profile .btn {
    background-color: #3498db;
    color: white;
    padding: 10px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    transition: background-color 0.3s;
}

.update-profile .btn:hover {
    background-color: #2980b9;
}

.update-profile .btn.back-btn {
    display: block;
    text-align: center;
    margin-top: 20px;
    background-color: #7f8c8d;
}

.update-profile .btn.back-btn:hover {
    background-color: #34495e;
}

.update-profile .error {
    color: #e74c3c;
    text-align: center;
    margin-bottom: 15px;
}

.update-profile .success {
    color: #27ae60;
    text-align: center;
    margin-bottom: 15px;
}

/* Общие стили для кнопок */
.chat-actions .btn {
    flex-grow: 1;
    background-color: #3498db;
    color: white;
    padding: 10px 15px;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s;
    border: none; /* Убрали контур */
}

/* Красный стиль для кнопок */
.chat-actions .btn-danger {
    background-color: #e74c3c;
    color: #fff;
    border: none;
}

.chat-actions .btn-danger:hover {
    background-color: #c0392b;
}

/* Стили для формы входа */
.login-form {
    width: 100%;
    max-width: 400px;
    margin: 50px auto;
    background-color: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.login-form h2 {
    margin-bottom: 20px;
    color: #2c3e50;
    font-size: 24px;
}

.login-form label {
    display: block;
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
    text-align: left;
}

.login-form input {
    width: 93%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 14px;
}

.login-form button {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: none;
    background-color: #3498db;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.login-form button:hover {
    background-color: #2980b9;
}

/* Ошибки */
.login-form .error {
    background-color: #e74c3c;
    color: #ffffff;
    padding: 10px;
    border-radius: 5px;
    font-size: 14px;
    margin-bottom: 15px;
    text-align: center;
}

/* Стили для модального окна */
.modal {
    display: none; /* Скрыто по умолчанию */
    position: fixed;
    z-index: 1000;
    padding-top: 60px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.9); /* Затемнение фона */
}

.modal-content {
    margin: auto;
    display: block;
    max-width: 80%;
    max-height: 80%;
    animation: zoom 0.3s; /* Анимация открытия */
}

@keyframes zoom {
    from {
        transform: scale(0);
    }
    to {
        transform: scale(1);
    }
}

.close {
    position: absolute;
    top: 20px;
    right: 35px;
    color: #fff;
    font-size: 40px;
    font-weight: bold;
    transition: 0.3s;
    cursor: pointer;
}

.close:hover,
.close:focus {
    color: #bbb;
    text-decoration: none;
    cursor: pointer;
}

#caption {
    margin: auto;
    display: block;
    width: 80%;
    max-width: 700px;
    text-align: center;
    color: #ccc;
    padding: 10px 0;
    font-size: 1.2em;
}
/* Кнопка обновления */
.btn-warning {
    background-color: #f39c12;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 8px 15px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-right: 15px; /* Добавляем отступ справа */
    display: inline-flex;
    align-items: center;
    gap: 8px; /* Расстояние между иконкой и текстом */
}

.btn-warning:hover {
    background-color: #e67e22;
    transform: translateY(-1px); /* Эффект приподнятия */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Тень при наведении */
}

/* Для совместимости с другими кнопками в хедере */


/* Иконки */
.fa-sync-alt {
    transition: transform 0.5s;
}

/* Анимация вращения иконки при загрузке */
.updating .fa-sync-alt {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
/* В admin.css */
.update-status {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

.success-alert, .error-alert {
    padding: 15px;
    border-radius: 5px;
    margin-bottom: 10px;
    animation: slideIn 0.3s ease-out;
}

.success-alert {
    background: #2ecc71;
    color: white;
}

.error-alert {
    background: #e74c3c;
    color: white;
}

.close-btn {
    background: none;
    border: none;
    color: white;
    margin-left: 15px;
    cursor: pointer;
    float: right;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}
/* Прогресс-бар */
.update-status {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    min-width: 280px;
}

.progress-text {
    font-size: 12px;
    color: #666;
    margin-top: 5px;
    text-align: center;
}

/* Анимации */
@keyframes progress-pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
}

.loading .progress-fill {
    animation: progress-pulse 1.5s infinite;
}
.update-status {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
    background: white;
    padding: 15px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    min-width: 280px;
}

.success-alert,
.error-alert {
    margin-top: 10px;
}

.btn-warning.updating {
    opacity: 0.8;
    cursor: progress;
}
/* Стили для группировки сообщений */
.message-group {
    margin-bottom: 15px;
    max-width: 70%;
}

.message-group.admin {
    margin-right: auto;
}

.message-group.client {
    margin-right: auto;
}

/* Имя отправителя */
.sender-name {
    font-weight: bold;
    margin-bottom: 5px;
    color: #333;
}

/* Сообщения внутри группы */
.message-group .message {
    margin-bottom: 5px;
}

.message-group .message:last-child {
    margin-bottom: 0;
}

/* Контент сообщения */
.message-group .message-content {
    background-color: #f1f1f1;
    padding: 10px;
    border-radius: 8px;
    display: inline-block;
}

.message-group.admin .message-content {
    background-color: #e3f2fd;
}

/* Время под последним сообщением */
.message-group .time {
    display: block;
    font-size: 0.8em;
    color: #666;
    margin-top: 5px;
}
@keyframes neonGlow {
    0% { box-shadow: 0 0 5px #00ff88, 0 0 10px #00ff88, 0 0 20px #00ff88; }
    50% { box-shadow: 0 0 10px #00ff88, 0 0 20px #00ff88, 0 0 40px #00ff88; }
    100% { box-shadow: 0 0 5px #00ff88, 0 0 10px #00ff88, 0 0 20px #00ff88; }
}

.chat-item.unread {
    animation: neonGlow 1.5s infinite;
    border-radius: 12px;
}
#enableNotificationsBtn {
    margin: 10px;
    padding: 10px 20px;
    background-color: #17a2b8;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

#enableNotificationsBtn:hover {
    background-color: #138496;
}



mysite.my\chat\assets\css\all.min.css [Пропущено по размеру]


mysite.my\chat\assets\css\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\assets\css\styles.css

Содержимое файла styles.css:
/* Основные стили для страницы */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background: linear-gradient(135deg, #2c3e50 0%, #4a6072 100%); /* Серый градиент */
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    color: #fff;
}

/* Обертка для чата */
.chat-wrapper {
    width: 100%;
    max-width: 800px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); /* Увеличенная тень для объема */
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 90vh;
}

/* Контейнер чата */
.chat-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 20px;
    height: 96%;
    box-sizing: border-box;
}

/* Заголовок чата */
.chat-container h2 {
    margin: 0 0 20px 0;
    font-size: 24px;
    color: #fff;
    text-align: center;
    font-weight: 600;
}

/* Контейнер для сообщений */
.messages-container {
    flex-grow: 1;
    overflow-y: auto;
    padding: 15px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 12px;
    margin-bottom: 20px;
    min-height: 0;
    box-sizing: border-box;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.2) transparent;
    border: 1px solid rgba(255, 255, 255, 0.1); /* Добавлен объем */
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1); /* Внутренняя тень для объема */
}

.messages-container::-webkit-scrollbar {
    width: 8px;
}

.messages-container::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

.messages-container::-webkit-scrollbar-track {
    background: transparent;
}

/* Стили для сообщений */
.messages-container .admin,
.messages-container .client {
    margin-bottom: 15px;
    padding: 12px;
    border-radius: 12px;
    max-width: 70%;
    box-sizing: border-box;
    position: relative;
}

.messages-container .admin {
    background: linear-gradient(135deg, #007bff, #0056b3);
    margin-left: auto;
    color: #fff;
    border-bottom-right-radius: 4px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2); /* Тень для объема */
}

.messages-container .client {
    background: linear-gradient(135deg, #4a5568, #2d3748);
    margin-right: auto;
    color: #fff;
    border-bottom-left-radius: 4px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2); /* Тень для объема */
}

/* Время сообщения */
.time {
    display: block;
    font-size: 0.75em;
    color: rgba(255, 255, 255, 0.7);
    margin-top: 5px;
    text-align: right;
}

/* Форма ввода сообщения */
#messageForm {
	border-radius: 8px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 15px;
    background: rgba(255, 255, 255, 0.05);
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    flex-shrink: 0;
    box-sizing: border-box;
}

#messageForm textarea {
    resize: none;
    width: calc(100% - 26px); /* Учитываем padding */
    height: 60px; /* Фиксированная высота */
    border-radius: 8px;
    padding: 12px;
    font-size: 16px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
    transition: border-color 0.3s ease;
    overflow-y: auto !important;
}

#messageForm textarea::placeholder {
    color: rgba(255, 255, 255, 0.7); /* Белый цвет с небольшой прозрачностью */
}

#messageForm textarea:focus {
    border-color: #007bff;
    outline: none;
}

#messageForm input[type="file"] {
    border: none;
    padding: 10px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #fff;
    cursor: pointer;
    transition: background 0.3s ease;
    width: calc(100% - 20px); /* Учитываем padding */
}

#messageForm input[type="file"]:hover {
    background: rgba(255, 255, 255, 0.2);
}

#messageForm button {
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: #fff;
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

#messageForm button:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
}

#messageForm button:active {
    transform: translateY(0);
    box-shadow: none;
}

.online-status {
    padding: 12px;
    background: rgba(255, 255, 255, 0.1);
    text-align: center;
    font-size: 16px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    color: #fff;
}

.online-status span {
    font-weight: bold;
    color: #00ff88;
}

/* Модальное окно для изображений */
#imageModal {
    display: none;
    position: fixed;
    z-index: 1000;
    padding-top: 60px;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
}

#modalImage {
    margin: auto;
    display: block;
    max-width: 80%;
    max-height: 80%;
    border-radius: 12px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
}

.close {
    position: absolute;
    top: 20px;
    right: 35px;
    color: #fff;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
    transition: color 0.3s ease;
}

.close:hover {
    color: #ff4d4d;
}

/* Стили для группировки сообщений */
.message-group {
    margin-bottom: 15px;
    max-width: 70%;
}

.message-group.admin {
    margin-left: auto;
}

.message-group.client {
    margin-right: auto;
}

/* Имя отправителя */
.sender-name {
    font-weight: bold;
    margin-bottom: 5px;
    color: rgba(255, 255, 255, 0.8);
}

/* Сообщения внутри группы */
.message-group .message {
    margin-bottom: 5px;
}

.message-group .message:last-child {
    margin-bottom: 0;
}

/* Контент сообщения */
.message-group .message-content {
    background: rgba(255, 255, 255, 0.1);
    padding: 10px;
    border-radius: 8px;
    display: inline-block;
    color: #fff;
}

.message-group.admin .message-content {
    background: rgba(0, 123, 255, 0.2);
}

/* Время под последним сообщением */
.message-group .time {
    display: block;
    font-size: 0.8em;
    color: rgba(255, 255, 255, 0.6);
    margin-top: 5px;
}



mysite.my\chat\assets\images\admin.png [Пропущено по расширению]


mysite.my\chat\assets\images\client.png [Пропущено по расширению]


mysite.my\chat\assets\images\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\assets\images\notification-icon.png [Пропущено по расширению]


mysite.my\chat\assets\js\admin.js

Содержимое файла admin.js:
let currentChatId = null;
const chatContainer = document.getElementById('chat-container');
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const textarea = chatForm.querySelector('textarea[name="message"]');
let hasUnreadMessages = false; // Флаг для отслеживания непрочитанных сообщений
let notificationShown = false; // Флаг для отслеживания показанных уведомлений
let lastUnreadCount = 0; // Количество непрочитанных сообщений в прошлом обновлении
let notificationsEnabled = false; // Флаг для отслеживания разрешения на уведомления и звук

// 1. Функция для прокрутки вниз
function scrollToBottom() {
    setTimeout(() => {
        if (chatMessages) {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
    }, 100); // Задержка 100 мс
}

// 2. Обработчик отправки формы
const handleSubmit = async function (event) {
    event.preventDefault(); // Предотвращаем стандартное поведение формы
    if (!currentChatId) {
        alert('Выберите чат для отправки сообщения.');
        return;
    }

    const formData = new FormData(chatForm);
    formData.append('chatId', currentChatId);

    try {
        const response = await fetch('send_message.php', {
            method: 'POST',
            body: formData,
            credentials: 'same-origin'
        });

        const data = await response.json();

        if (data.success) {
            chatForm.reset();
            loadChatMessages(currentChatId);
            scrollToBottom();
        } else {
            alert('Ошибка: ' + data.error);
        }
    } catch (error) {
        console.error('Ошибка при отправке сообщения:', error);
        alert('Ошибка при отправке сообщения. Проверьте консоль для подробностей.');
    }
};

// 3. Обработчик Enter (без Shift)
textarea.addEventListener('keydown', function (e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault(); // Предотвращаем перенос строки
        handleSubmit(e); // Имитируем отправку формы
    }
});

// 4. Обработчик отправки формы
chatForm.addEventListener('submit', handleSubmit);

// 5. Остальной код (без изменений)
function setupChatItemListeners() {
    document.querySelectorAll('.chat-item').forEach(chatItem => {
        chatItem.addEventListener('click', function () {
            currentChatId = this.getAttribute('data-chat-id');
            chatContainer.style.display = 'block';
            loadChatMessages(currentChatId);
        });
    });
}

function loadChatMessages(chatId) {
    fetch(`get_messages.php?id=${chatId}`)
        .then(response => response.json())
        .then(messages => {
            if (chatMessages) {
                const isNearBottom = chatMessages.scrollHeight - chatMessages.scrollTop <= chatMessages.clientHeight + 100;

                let groupedMessages = [];
                let lastSender = null;
                let lastTime = null;

                messages.forEach(msg => {
                    const currentTime = new Date(msg.time).getTime();
                    const isSameSender = lastSender === (msg.isAdmin ? 'admin' : 'client');
                    const isWithinTimeFrame = lastTime && (currentTime - lastTime) < 120000; // 2 минуты

                    if (isSameSender && isWithinTimeFrame) {
                        groupedMessages[groupedMessages.length - 1].messages.push(msg);
                    } else {
                        groupedMessages.push({
                            sender: msg.isAdmin ? 'admin' : 'client',
                            senderName: msg.isAdmin ? msg.adminName : 'Пользователь:',
                            messages: [msg]
                        });
                    }

                    lastSender = msg.isAdmin ? 'admin' : 'client';
                    lastTime = currentTime;
                });

                chatMessages.innerHTML = '';

                groupedMessages.forEach(group => {
                    const groupContainer = document.createElement('div');
                    groupContainer.classList.add('message-group', group.sender);

                    const senderNameElement = document.createElement('div');
                    senderNameElement.classList.add('sender-name');
                    senderNameElement.textContent = group.senderName;
                    groupContainer.appendChild(senderNameElement);

                    group.messages.forEach((msg, index) => {
                        const messageElement = document.createElement('div');
                        messageElement.classList.add('message');
                        messageElement.innerHTML = `
                            <div class="message-content">${msg.message}</div>
                            ${msg.image ? `<br><img src="${msg.image}" alt="Изображение" style="max-width:200px; cursor: pointer;">` : ''}
                        `;

                        if (index === group.messages.length - 1) {
                            const timeElement = document.createElement('span');
                            timeElement.classList.add('time');
                            timeElement.textContent = msg.time;
                            messageElement.appendChild(timeElement);
                        }

                        groupContainer.appendChild(messageElement);
                    });

                    chatMessages.appendChild(groupContainer);
                });

                if (isNearBottom) {
                    setTimeout(() => {
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    }, 100);
                }
            }
            updateChatList();
        })
        .catch(error => {
            console.error('Ошибка при загрузке сообщений:', error);
            alert('Ошибка при загрузке сообщений. Проверьте консоль для подробностей.');
        });
}

function updateChatList() {
    fetch('get_chat_list.php')
        .then(response => response.text())
        .then(html => {
            document.querySelector('.chat-list').innerHTML = html;
            setupChatItemListeners();

            // Проверка непрочитанных сообщений
            let currentUnreadCount = 0;
            document.querySelectorAll('.chat-item').forEach(chatItem => {
                const unreadCount = parseInt(chatItem.querySelector('p:last-child').textContent.match(/\d+/)[0]);
                if (unreadCount > 0) {
                    chatItem.classList.add('unread');
                    currentUnreadCount += unreadCount;
                } else {
                    chatItem.classList.remove('unread');
                }
            });

            // Если нет непрочитанных сообщений, сбрасываем флаг
            if (currentUnreadCount === 0) {
                notificationShown = false;
            }

            // Если количество непрочитанных сообщений увеличилось и уведомления разрешены
            if (currentUnreadCount > lastUnreadCount && notificationsEnabled) {
                playNotificationSound();
                showDesktopNotification();
            }

            lastUnreadCount = currentUnreadCount;
        })
        .catch(error => {
            console.error('Ошибка при обновлении списка чатов:', error);
        });
}

function closeChat() {
    if (!currentChatId) {
        alert('Выберите чат для закрытия.');
        return;
    }
    fetch(`close_chat.php?id=${currentChatId}`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateChatList();
            } else {
                alert('Ошибка: ' + data.error);
            }
        });
}

function clearChat() {
    if (!currentChatId) {
        alert('Выберите чат для очистки.');
        return;
    }
    fetch(`clear_chat.php?id=${currentChatId}`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateChatList();
            } else {
                alert('Ошибка: ' + data.error);
            }
        });
}

function updateChatStatus(status, adminName) {
    if (!currentChatId) {
        alert('Выберите чат для обновления статуса.');
        return;
    }
    fetch(`update_chat_status.php?id=${currentChatId}&status=${status}&admin=${adminName}`, { method: 'GET' })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updateChatList();
            } else {
                alert('Ошибка: ' + data.error);
            }
        });
}

function updateHostnames() {
    const btn = document.querySelector('.btn-warning');
    console.log('Кнопка нажата');

    if (!confirm('Обновить имена компьютеров для всех чатов?')) {
        console.log('Действие отменено пользователем');
        return;
    }

    btn.classList.add('updating');
    const statusElement = document.createElement('div');
    statusElement.className = 'update-status';

    const progressBar = document.createElement('div');
    progressBar.style.cssText = `
        width: 250px; 
        height: 8px;
        background: #eee;
        border-radius: 4px;
        margin: 10px 0;
        overflow: hidden;
    `;

    const progressFill = document.createElement('div');
    progressFill.style.cssText = `
        width: 0%;
        height: 100%;
        background: #3498db;
        transition: width 0.3s ease;
    `;

    progressBar.appendChild(progressFill);
    statusElement.appendChild(progressBar);
    document.body.appendChild(statusElement);

    let progress = 0;
    const progressInterval = setInterval(() => {
        progress = Math.min(progress + Math.random() * 10, 90);
        progressFill.style.width = `${progress}%`;
    }, 300);

    console.log('Отправка запроса...');

    fetch('update_hostnames.php?_=' + Date.now())
        .then(response => {
            console.log('Ответ получен, статус:', response.status);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.text();
        })
        .then(data => {
            console.log('Данные ответа:', data);
            progressFill.style.width = '100%';
            progressFill.style.background = '#2ecc71';

            statusElement.innerHTML += `
                <div class="success-alert">
                    ✔️ ${data}
                    <button onclick="this.parentElement.remove()" class="close-btn">&times;</button>
                </div>`;

            updateChatList();
        })
        .catch(error => {
            console.error('Ошибка:', error);
            progressFill.style.background = '#e74c3c';
            statusElement.innerHTML += `
                <div class="error-alert">
                    ❌ Ошибка: ${error.message}
                    <button onclick="this.parentElement.remove()" class="close-btn">&times;</button>
                </div>`;
        })
        .finally(() => {
            clearInterval(progressInterval);
            btn.classList.remove('updating');
            setTimeout(() => {
                statusElement.remove();
            }, 5000);
        });
}

// Инициализация
document.addEventListener('DOMContentLoaded', function () {
    setupChatItemListeners();

    // Модальное окно для изображений
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');
    const closeBtn = document.querySelector('.close');

    chatMessages.addEventListener('click', function (event) {
        if (event.target.tagName === 'IMG') {
            modal.style.display = 'block';
            modalImg.src = event.target.src;
        }
    });

    closeBtn.onclick = () => modal.style.display = 'none';
    window.onclick = (event) => {
        if (event.target === modal) modal.style.display = 'none';
    };
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && modal.style.display === 'block') {
            modal.style.display = 'none';
        }
    });

    setInterval(() => {
        if (currentChatId) {
            loadChatMessages(currentChatId);
        }
    }, 5000);

    setInterval(updateChatList, 5000);
});

function playNotificationSound() {
    const notificationSound = document.getElementById('notificationSound');
    if (notificationSound) {
        notificationSound.play().catch(error => {
            console.error('Ошибка воспроизведения звука:', error);
        });
    }
}

function showDesktopNotification() {
    if (Notification.permission === 'granted') {
        new Notification('Новое сообщение', {
            body: 'У вас есть непрочитанные сообщения в чате.',
            icon: '../assets/images/notification-icon.png'
        });
    } else if (Notification.permission !== 'denied') {
        Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
                new Notification('Новое сообщение', {
                    body: 'У вас есть непрочитанные сообщения в чате.',
                    icon: '../assets/images/notification-icon.png'
                });
            }
        });
    }
}

// Обработчик для кнопки разрешения уведомлений и звука
document.getElementById('enableNotificationsBtn').addEventListener('click', function () {
    // Запрашиваем разрешение на уведомления
    Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
            notificationsEnabled = true;
            alert('Уведомления и звук разрешены!');
        } else {
            alert('Уведомления не разрешены. Пожалуйста, разрешите уведомления в настройках браузера.');
        }
    });

    // Воспроизводим тестовый звук для разрешения автовоспроизведения
    const notificationSound = document.getElementById('notificationSound');
    if (notificationSound) {
        notificationSound.play().catch(error => {
            console.error('Ошибка воспроизведения звука:', error);
        });
    }
});

document.addEventListener('DOMContentLoaded', function () {
    if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {
        Notification.requestPermission();
    }
});



mysite.my\chat\assets\js\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\assets\js\script.js

Содержимое файла script.js:
document.addEventListener('DOMContentLoaded', function () {
    const messageForm = document.getElementById('messageForm');
    const chatDiv = document.getElementById('messages');
    const submitButton = messageForm.querySelector('button[type="submit"]');
    const textarea = messageForm.querySelector('textarea[name="message"]');
    let isSending = false;
    let scrollTimeout;

    // Массив для хранения идентификаторов обработанных сообщений
    let processedMessages = [];

    // Переменная для хранения разрешения на уведомления и звук
    let notificationsEnabled = false;

    // Проверка поддержки уведомлений
    if (!("Notification" in window)) {
        console.log("Браузер не поддерживает уведомления.");
    }

    // Функция для воспроизведения звука
    function playNotificationSound() {
        if (notificationsEnabled) {
            const audio = new Audio('../assets/sounds/notification.mp3');
            audio.play().catch(error => {
                console.error("Ошибка воспроизведения звука:", error);
            });
        }
    }

    // Функция для показа уведомления на рабочем столе
    function showDesktopNotification(message) {
        if (notificationsEnabled && Notification.permission === "granted") {
            new Notification("Новое сообщение от администратора", {
                body: message,
                icon: '../assets/images/notification-icon.png' // Иконка уведомления
            });
        }
    }

    // Отслеживание активности вкладки
    let isTabActive = true;

    document.addEventListener('visibilitychange', () => {
        isTabActive = !document.hidden;
    });

    // Функция для обработки новых сообщений
    function handleNewMessage(msg) {
        // Генерация уникального идентификатора сообщения (например, время + текст)
        const messageId = `${msg.time}-${msg.message}`;

        // Проверка, было ли сообщение уже обработано
        if (!processedMessages.includes(messageId)) {
            processedMessages.push(messageId); // Добавляем сообщение в список обработанных
            if (msg.isAdmin && !isTabActive) {
                playNotificationSound();
                showDesktopNotification(msg.message);
            }
        }
    }

    // Показ модального окна с предложением разрешить уведомления и звук
    function showNotificationPermissionModal() {
        const modal = document.createElement('div');
        modal.style.position = 'fixed';
        modal.style.top = '50%';
        modal.style.left = '50%';
        modal.style.transform = 'translate(-50%, -50%)';
        modal.style.backgroundColor = '#2c3e50'; // Темный фон, как в чате
        modal.style.padding = '20px';
        modal.style.borderRadius = '12px';
        modal.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.3)'; // Тень, как в чате
        modal.style.zIndex = '1000';
        modal.style.textAlign = 'center';
        modal.style.width = '320px'; // Фиксированная ширина
        modal.style.fontFamily = 'Arial, sans-serif';
        modal.style.color = '#ecf0f1'; // Светлый текст
        modal.style.border = '1px solid rgba(255, 255, 255, 0.1)'; // Граница

        modal.innerHTML = `
            <h3 style="margin: 0 0 15px; font-size: 18px; color: #ecf0f1;">Разрешить уведомления?</h3>
            <p style="margin: 0 0 20px; font-size: 14px; color: #bdc3c7;">Вы будете получать уведомления на рабочий стол о новых сообщениях от администратора.</p>
            <div style="display: flex; justify-content: space-between; gap: 10px;">
                <button id="allowNotifications" style="flex: 1; padding: 10px 20px; background-color: #27ae60; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; transition: background-color 0.3s;">Да</button>
                <button id="denyNotifications" style="flex: 1; padding: 10px 20px; background-color: #e74c3c; color: white; border: none; border-radius: 8px; cursor: pointer; font-size: 14px; transition: background-color 0.3s;">Нет</button>
            </div>
        `;

        // Добавляем hover-эффекты для кнопок
        const allowButton = modal.querySelector('#allowNotifications');
        const denyButton = modal.querySelector('#denyNotifications');

        allowButton.addEventListener('mouseenter', () => {
            allowButton.style.backgroundColor = '#2ecc71';
        });
        allowButton.addEventListener('mouseleave', () => {
            allowButton.style.backgroundColor = '#27ae60';
        });

        denyButton.addEventListener('mouseenter', () => {
            denyButton.style.backgroundColor = '#c0392b';
        });
        denyButton.addEventListener('mouseleave', () => {
            denyButton.style.backgroundColor = '#e74c3c';
        });

        // Обработка нажатия на кнопку "Да"
        allowButton.addEventListener('click', () => {
            notificationsEnabled = true;
            Notification.requestPermission().then(permission => {
                if (permission === "granted") {
                    console.log("Уведомления разрешены.");
                }
            });
            document.body.removeChild(modal);
        });

        // Обработка нажатия на кнопку "Нет"
        denyButton.addEventListener('click', () => {
            notificationsEnabled = false;
            document.body.removeChild(modal);
        });

        document.body.appendChild(modal);
    }

    // Показываем модальное окно при загрузке страницы
    showNotificationPermissionModal();

    // 1. Полностью отключаем стандартное поведение формы
    messageForm.onsubmit = function (e) {
        e.preventDefault();
        return false;
    };

    // 2. Обработчик для кнопки и Enter
    const handleSubmit = async function (event) {
        event.preventDefault();
        if (isSending) return;

        isSending = true;
        submitButton.disabled = true;

        try {
            const formData = new FormData(messageForm);
            const response = await fetch('send_message.php', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            });

            const data = await response.json();

            if (data.success) {
                messageForm.reset();
                await updateChat(true); // Принудительная прокрутка только после отправки
            } else {
                alert('Ошибка: ' + (data.error || 'Неизвестная ошибка'));
            }
        } catch (error) {
            console.error('Ошибка:', error);
            alert('Ошибка сети');
        } finally {
            isSending = false;
            submitButton.disabled = false;
        }
    };

    // 3. Единый обработчик для всех способов отправки
    messageForm.addEventListener('submit', handleSubmit);
    textarea.addEventListener('keydown', function (e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            handleSubmit(e);
        }
    });

    // 4. Улучшенная функция обновления чата с группировкой сообщений
    async function updateChat(forceScroll = false) {
        try {
            const response = await fetch('get_messages.php', {
                credentials: 'same-origin'
            });

            if (!response.ok) {
                restoreSession();
                return;
            }

            const messages = await response.json();
            const wasNearBottom = chatDiv.scrollHeight - chatDiv.scrollTop <= chatDiv.clientHeight + 100;

            // Группировка сообщений
            let groupedMessages = [];
            let lastSender = null;
            let lastTime = null;

            messages.forEach(msg => {
                const currentTime = new Date(msg.time).getTime();
                const isSameSender = lastSender === (msg.isAdmin ? 'admin' : 'client');
                const isWithinTimeFrame = lastTime && (currentTime - lastTime) < 120000; // 2 минуты

                if (isSameSender && isWithinTimeFrame) {
                    groupedMessages[groupedMessages.length - 1].messages.push(msg);
                } else {
                    groupedMessages.push({
                        sender: msg.isAdmin ? 'admin' : 'client',
                        senderName: msg.isAdmin ? msg.adminName : 'Вы',
                        messages: [msg]
                    });
                }

                // Обработка новых сообщений от администратора
                if (msg.isAdmin) {
                    handleNewMessage(msg);
                }

                lastSender = msg.isAdmin ? 'admin' : 'client';
                lastTime = currentTime;
            });

            // Отрисовка сообщений
            chatDiv.innerHTML = groupedMessages.map(group => `
                <div class="message-group ${group.sender}">
                    <div class="sender-name">${group.senderName}</div>
                    ${group.messages.map((msg, index) => `
                        <div class="message">
                            <div class="message-content">${msg.message}</div>
                            ${msg.image ? `<img src="${msg.image}" style="max-width:200px;">` : ''}
                            ${index === group.messages.length - 1 ? `<span class="time">${msg.time}</span>` : ''}
                        </div>
                    `).join('')}
                </div>
            `).join('');

            // Умная прокрутка
            if (forceScroll || wasNearBottom) {
                clearTimeout(scrollTimeout);
                scrollTimeout = setTimeout(() => {
                    chatDiv.scrollTo({
                        top: chatDiv.scrollHeight,
                        behavior: 'smooth'
                    });
                }, 100);
            }
        } catch (error) {
            console.error('Ошибка обновления:', error);
        }
    }

    // 5. Функция восстановления сессии
    function restoreSession() {
        const clientName = localStorage.getItem('clientName');
        if (clientName) {
            fetch(`restore_session.php?name=${encodeURIComponent(clientName)}`, {
                credentials: 'same-origin'
            })
                .then(response => {
                    if (response.ok) {
                        window.location.href = '/chat/client'; // Редирект
                    }
                })
                .catch(error => {
                    console.error('Ошибка восстановления:', error);
                });
        }
    }

    // 6. Функция обновления онлайн-админов
    function updateOnlineAdmins() {
        fetch('get_online_admins.php', {
            credentials: 'same-origin'
        })
            .then(response => response.json())
            .then(data => {
                document.getElementById('onlineAdmins').textContent = data.online;
            })
            .catch(error => console.error('Ошибка:', error));
    }

    // 7. Модальное окно для изображений
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById("modalImage");
    const span = document.getElementsByClassName("close")[0];

    chatDiv.addEventListener('click', function (e) {
        if (e.target.tagName === 'IMG') {
            modal.style.display = "block";
            modalImg.src = e.target.src;
        }
    });

    span.onclick = () => modal.style.display = "none";
    window.onclick = (event) => {
        if (event.target === modal) modal.style.display = "none";
    };
    document.addEventListener('keydown', (event) => {
        if (event.key === "Escape" && modal.style.display === "block") {
            modal.style.display = "none";
        }
    });

    // Инициализация
    updateChat();
    updateOnlineAdmins();
    setInterval(() => updateChat(false), 10000); // Обновление чата без прокрутки
    setInterval(updateOnlineAdmins, 10000); // Обновление онлайн-админов
});



mysite.my\chat\assets\sounds\notification.mp3 [Пропущено по расширению]


mysite.my\chat\assets\webfonts\fa-solid-900.ttf [Пропущено по расширению]


mysite.my\chat\assets\webfonts\fa-solid-900.woff [Пропущено по расширению]


mysite.my\chat\assets\webfonts\fa-solid-900.woff2 [Пропущено по расширению]


mysite.my\chat\assets\webfonts\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\chats\81d375b340639f9edf471f16e216ef03.json

Содержимое файла 81d375b340639f9edf471f16e216ef03.json:
[
    {
        "time": "2025-03-20 19:40:27",
        "isAdmin": false,
        "message": "привет",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:40:37",
        "isAdmin": false,
        "message": "как дела",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:40:44",
        "isAdmin": false,
        "message": "чем занимаешься?",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:40:50",
        "isAdmin": false,
        "message": "аааа",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:41:03",
        "isAdmin": false,
        "message": "ывпдлывпдыв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:41:28",
        "isAdmin": true,
        "message": "привет",
        "image": null,
        "adminName": "asdadwfav"
    },
    {
        "time": "2025-03-20 19:46:50",
        "isAdmin": false,
        "message": "хаюхай",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:46:58",
        "isAdmin": false,
        "message": "сысысыс",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:47:29",
        "isAdmin": false,
        "message": "првеит",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:52:31",
        "isAdmin": false,
        "message": "цуацуа",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:52:59",
        "isAdmin": false,
        "message": "ыкпыкп",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:54:36",
        "isAdmin": false,
        "message": "уацуау",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:54:47",
        "isAdmin": false,
        "message": "фцвфцвфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:54:52",
        "isAdmin": false,
        "message": "фцвфцвц",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:55:57",
        "isAdmin": false,
        "message": "sdfsdfsf",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 19:56:05",
        "isAdmin": false,
        "message": "ssdvdv",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:12:23",
        "isAdmin": false,
        "message": "ываываы",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:23:42",
        "isAdmin": false,
        "message": "привет",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:23:56",
        "isAdmin": true,
        "message": "апвап",
        "image": null,
        "adminName": "asdadwfav"
    },
    {
        "time": "2025-03-20 20:24:00",
        "isAdmin": false,
        "message": "вапвапвап",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:24:08",
        "isAdmin": false,
        "message": "ыаыаыва",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:24:34",
        "isAdmin": false,
        "message": "фцфцвфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:24:39",
        "isAdmin": true,
        "message": "фцвфцвфцв",
        "image": null,
        "adminName": "asdadwfav"
    },
    {
        "time": "2025-03-20 20:24:45",
        "isAdmin": false,
        "message": "фцвфцвфцвфцвфцвфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:24:56",
        "isAdmin": false,
        "message": "фцвфцвфцвфцвфц",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:27:58",
        "isAdmin": false,
        "message": "йцвйцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:28:14",
        "isAdmin": false,
        "message": "фцвфцвфц",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:28:49",
        "isAdmin": false,
        "message": "фывфыфыв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:29:23",
        "isAdmin": false,
        "message": "фывфыфыв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:29:32",
        "isAdmin": false,
        "message": "фывфывфыв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:31:57",
        "isAdmin": false,
        "message": "кепкепкепкеп",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:32:11",
        "isAdmin": false,
        "message": "кепкепкпкепк",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:32:25",
        "isAdmin": false,
        "message": "кепркпкепкепк",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:35:55",
        "isAdmin": false,
        "message": "",
        "image": "\/chat\/uploads\/67dc6e1bb2729.png",
        "adminName": null
    },
    {
        "time": "2025-03-20 20:36:10",
        "isAdmin": true,
        "message": "ываываываыва",
        "image": null,
        "adminName": "asdadwfav"
    },
    {
        "time": "2025-03-20 20:36:17",
        "isAdmin": false,
        "message": "ываываываываываываываываываываыва",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:36:34",
        "isAdmin": false,
        "message": "ываываываываываыва",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:36:51",
        "isAdmin": false,
        "message": "ываываываываыа",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:37:04",
        "isAdmin": false,
        "message": "ываываыва",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:37:27",
        "isAdmin": false,
        "message": "вапвапвапвап",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:37:32",
        "isAdmin": false,
        "message": "вапвапвап",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:37:38",
        "isAdmin": false,
        "message": "вапвапвап",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:37:47",
        "isAdmin": false,
        "message": "вапвапвапвапвап",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:40:27",
        "isAdmin": false,
        "message": "фцвфцфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:40:40",
        "isAdmin": false,
        "message": "фцвфцфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:41:36",
        "isAdmin": false,
        "message": "фцвфцвфц",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:41:43",
        "isAdmin": false,
        "message": "фцвфцвфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:41:55",
        "isAdmin": false,
        "message": "фцвфцвфцв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:42:08",
        "isAdmin": false,
        "message": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:42:25",
        "isAdmin": false,
        "message": "фывфывфывфывфыв",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:42:48",
        "isAdmin": false,
        "message": "вырапфшывпрывгпрзывпрфзывпрзыгвпрзфыпрфывпрфывщпгршпрфывщзпрфзврпфзып",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:43:25",
        "isAdmin": false,
        "message": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:43:42",
        "isAdmin": false,
        "message": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "image": null,
        "adminName": null
    },
    {
        "time": "2025-03-20 20:44:26",
        "isAdmin": false,
        "message": "1231231231231231231233",
        "image": null,
        "adminName": null
    }
]



mysite.my\chat\chats\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\client\get_messages.php

Содержимое файла get_messages.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';

// Проверяем сессию пользователя
if (!isset($_SESSION['client_name'])) {
    http_response_code(403); // Запрещено
    echo json_encode(['error' => 'Сессия не активна. Пожалуйста, перезагрузите страницу.']);
    exit();
}

$clientName = $_SESSION['client_name'];
$chatId = md5($clientName . getClientIP());

header('Content-Type: application/json');
$messages = getMessages($chatId);
echo json_encode($messages);
?>



mysite.my\chat\client\get_online_admins.php

Содержимое файла get_online_admins.php:
<?php
require_once '../includes/config.php';
require_once '../includes/functions.php';

header('Content-Type: application/json');
echo json_encode(['online' => getOnlineAdminsCount()]);
?>



mysite.my\chat\client\index.php

Содержимое файла index.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';

// Если имя клиента не установлено, проверяем localStorage
if (!isset($_SESSION['client_name'])) {
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $clientName = sanitizeInput($_POST['client_name']);
        if (!empty($clientName)) {
            $_SESSION['client_name'] = $clientName;
            $_SESSION['client_token'] = bin2hex(random_bytes(16)); // Генерация уникального токена
            header("Location: index.php");
            exit();
        } else {
            $error = "Пожалуйста, введите ваше имя.";
        }
    } else {
        // Проверяем, есть ли имя в localStorage
        echo "<script>
            if (localStorage.getItem('clientName')) {
                window.location.href = 'restore_session.php?name=' + encodeURIComponent(localStorage.getItem('clientName'));
            }
        </script>";
    }
    ?>
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>Введите ваше имя</title>
        <link rel="stylesheet" href="../assets/css/styles.css">
    </head>
    <body>
        <div class="login-form">
            <h2>Введите ваше имя</h2>
            <?php if (isset($error)): ?>
                <p class="error"><?= $error ?></p>
            <?php endif; ?>
            <form method="post">
                <label for="client_name">Ваше имя:</label>
                <input type="text" id="client_name" name="client_name" required>
                <button type="submit">Продолжить</button>
            </form>
        </div>
    </body>
    </html>
    <?php
    exit();
}

$clientName = $_SESSION['client_name'];
$clientToken = $_SESSION['client_token']; // Используем токен вместо имени
$chatId = md5($clientToken . getClientIP()); // Генерация chatId на основе токена и IP
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Чат поддержки</title>
	<audio id="notificationSound" src="../assets/sounds/notification.mp3" preload="auto"></audio>
    <link rel="stylesheet" href="../assets/css/styles.css">
    <script src="../assets/js/script.js" defer></script>
    <script>
        // Сохраняем имя клиента в localStorage
        localStorage.setItem('clientName', '<?= $clientName ?>');
    </script>
</head>
<body>
    <div class="chat-wrapper">
	<div class="online-status">
           Администраторов онлайн: <span id="onlineAdmins">0</span>
        </div>
        <div class="chat-container">
		    <div id="imageModal" class="modal">
        <span class="close">&times;</span>
        <img class="modal-content" id="modalImage">
    </div>
            <h2>Техподдержка</h2>
            <div id="messages" class="messages-container">
                <?php
                $messages = getMessages($chatId);
                foreach ($messages as $message) {
                    echo "<div class='" . ($message['isAdmin'] ? 'admin' : 'client') . "'>";
                    echo "<strong>" . ($message['isAdmin'] ? $message['adminName'] : 'Вы') . ":</strong> ";
                    echo htmlspecialchars($message['message']);
                    if ($message['image']) {
                        echo "<br><img src='" . $message['image'] . "' alt='Изображение' style='max-width: 200px;'>";
                    }
                    echo "<span class='time'>" . $message['time'] . "</span>";
                    echo "</div>";
                }
                ?>
            </div>
            <form id="messageForm" method="post" enctype="multipart/form-data">
                <input type="hidden" name="csrf_token" value="<?= generateCsrfToken() ?>">
                <textarea name="message" placeholder="Введите сообщение"></textarea>
                <input type="file" name="image">
                <button type="submit">Отправить</button>
            </form>
        </div>
    </div>
</body>
</html>



mysite.my\chat\client\restore_session.php

Содержимое файла restore_session.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';

// Проверка и обработка запроса
if (isset($_GET['name'])) {
    $clientName = sanitizeInput($_GET['name']);

    if (!empty($clientName)) {
        $_SESSION['client_name'] = $clientName;
        $_SESSION['client_token'] = bin2hex(random_bytes(16)); // Генерация уникального токена
        echo json_encode(['success' => true]);
		$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
        exit();
    }
}

// Возвращение ошибки, если имя клиента не указано
http_response_code(400); // HTTP-код для неверного запроса
echo json_encode(['success' => false, 'error' => 'Имя клиента не указано.']);

exit();
?>



mysite.my\chat\client\send_message.php

Содержимое файла send_message.php:
<?php
session_start();
require_once '../includes/config.php';
require_once '../includes/functions.php';
require_once '../includes/storage.php';
require_once '../includes/upload_functions.php';

header('Content-Type: application/json');

$response = ['success' => false, 'error' => ''];

// Проверка CSRF-токена
if (!isset($_POST['csrf_token']) || !validateCsrfToken($_POST['csrf_token'])) {
    $response['error'] = 'Ошибка валидации CSRF токена';
    echo json_encode($response);
    exit();
}

// Проверка активности сессии клиента
if (!isset($_SESSION['client_name'])) {
    $response['error'] = 'Сессия не активна. Пожалуйста, перезагрузите страницу.';
    echo json_encode($response);
    exit();
}

$clientName = $_SESSION['client_name'];
$chatId = md5($clientName . getClientIP());

// Проверка содержимого сообщения
$message = sanitizeInput($_POST['message'] ?? '');
$image = null;

if (empty($message) && (empty($_FILES['image']['name']) || $_FILES['image']['error'] !== UPLOAD_ERR_OK)) {
    $response['error'] = 'Пожалуйста, введите сообщение или выберите изображение';
    echo json_encode($response);
    exit();
}

// Обработка изображения
if (!empty($_FILES['image']['name']) && $_FILES['image']['error'] === UPLOAD_ERR_OK) {
    $image = handleFileUpload($_FILES['image']);
    if (is_string($image) && strpos($image, 'Ошибка') !== false) {
        $response['error'] = $image;
        echo json_encode($response);
        exit();
    }
}

// Работа с информацией о клиенте
$clientInfoPath = CLIENTS_DIR . "$chatId.json";
$clientInfo = [];

if (file_exists($clientInfoPath)) {
    $clientInfo = json_decode(file_get_contents($clientInfoPath), true);
    if (!$clientInfo) {
        $response['error'] = 'Ошибка чтения данных клиента';
        echo json_encode($response);
        exit();
    }

    // Автоматическое открытие закрытого чата
    if (strpos($clientInfo['status'], 'Закрыт') !== false) {
        $clientInfo['status'] = 'Открыт';
    }
} else {
    // Создание новой записи клиента
    $hostname = 'Неизвестный хост'; // Значение по умолчанию

    if (!DISABLE_DNS_LOOKUP) {
        $hostname = @gethostbyaddr(getClientIP()) ?: 'Неизвестный хост';
    }

    $clientInfo = [
        'name' => $clientName,
        'ip' => getClientIP(),
        'hostname' => $hostname,
        'created_at' => date('Y-m-d H:i:s'),
        'status' => 'Открыт',
        'last_activity' => date('Y-m-d H:i:s'),
        'last_admin_view' => '1970-01-01 00:00:00'
    ];
}

// Обновление активности
$clientInfo['last_activity'] = date('Y-m-d H:i:s');

// Сохранение информации о клиенте
if (!file_put_contents($clientInfoPath, 
    json_encode($clientInfo, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
    $response['error'] = 'Ошибка сохранения данных клиента';
    echo json_encode($response);
    exit();
}

// Сохранение сообщения
if (!saveMessage($chatId, $message, false, $image)) {
    $response['error'] = 'Ошибка сохранения сообщения';
    echo json_encode($response);
    exit();
}

// Успешный ответ
$response['success'] = true;
$response['image'] = $image;
echo json_encode($response);
exit();
?>



mysite.my\chat\clients\81d375b340639f9edf471f16e216ef03.json

Содержимое файла 81d375b340639f9edf471f16e216ef03.json:
{
    "name": "фывфыв",
    "ip": "::1",
    "hostname": "PC-01",
    "created_at": "2025-03-20 18:51:31",
    "status": "Открыт",
    "last_activity": "2025-03-20 20:44:26",
    "last_admin_view": "2025-03-20 20:46:50"
}



mysite.my\chat\clients\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\includes\admins.php

Содержимое файла admins.php:
<?php $ADMINS = array (
  'admin1' => 
  array (
    'password' => '$2y$10$gWBLir8XRS0xtB4WDyj0Qum.7WKzgCiwZDTdZjxeMIgZ6ZEnmx/3.',
    'name' => 'Иван adas',
  ),
  'admin2' => 
  array (
    'password' => '$2y$10$AV9De7OxBtmebj7EY3QCCeXlwmgJFp7YZ4w9wCzgAGXD9.KzSMuay',
    'name' => 'asdadwfav',
  ),
); ?>



mysite.my\chat\includes\config.php

Содержимое файла config.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Абсолютный путь к корню проекта
define('DISABLE_DNS_LOOKUP', true); // Отключаем DNS-запросы для существующих клиентов
define('ROOT_DIR', realpath(__DIR__ . '/..') . '/');
define('ADMINS_ONLINE_DIR', ROOT_DIR . 'admin_online/');
ini_set('log_errors', 1);
ini_set('error_log', ROOT_DIR . 'logs/error.log');

// Подключение файла администраторов
require_once 'admins.php';

// Настройки путей
define('UPLOAD_DIR', ROOT_DIR . 'uploads/');
define('CHATS_DIR', ROOT_DIR . 'chats/');
define('CLIENTS_DIR', ROOT_DIR . 'clients/');
define('MAX_FILE_SIZE', 5 * 1024 * 1024); // 5MB

// Создание директорий при их отсутствии
$dirs = [UPLOAD_DIR, CHATS_DIR, CLIENTS_DIR];
foreach ($dirs as $dir) {
    if (!file_exists($dir)) {
        mkdir($dir, 0755, true);
    }
}

// Настройки сессии
if (session_status() !== PHP_SESSION_ACTIVE) {
    session_start([
        'cookie_lifetime' => 86400, // Время жизни сессии (24 часа)
        'cookie_secure' => false,   // Для локальной сети можно отключить
        'cookie_httponly' => true   // Защита от XSS
    ]);
}

// Генерация CSRF токена
if (empty($_SESSION['csrf_token'])) {
    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
}
if (!file_exists(ADMINS_ONLINE_DIR)) {
    mkdir(ADMINS_ONLINE_DIR, 0755, true);
}
?>




mysite.my\chat\includes\functions.php

Содержимое файла functions.php:
<?php
function sanitizeInput($data) {
    if (is_array($data)) {
        return array_map('sanitizeInput', $data);
    }
    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');
}

function getClientIP() {
    $keys = ['HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR'];
    foreach ($keys as $key) {
        if (!empty($_SERVER[$key])) {
            return $_SERVER[$key];
        }
    }
    return 'unknown';
}

function generateCsrfToken() {
    if (empty($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
    return $_SESSION['csrf_token'];
}

function validateCsrfToken($token) {
    return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
}
function updateAdminOnlineStatus($username) {
    $file = ADMINS_ONLINE_DIR . md5($username) . '.txt';
    file_put_contents($file, time());
}

function getOnlineAdminsCount() {
    $online = 0;
    $files = glob(ADMINS_ONLINE_DIR . '*.txt');
    $currentTime = time();
    foreach ($files as $file) {
        $lastActive = (int)file_get_contents($file);
        if ($currentTime - $lastActive <= 300) { // 5 минут активности
            $online++;
        }
    }
    return $online;
}
?>



mysite.my\chat\includes\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\includes\session.php

Содержимое файла session.php:
<?php
if (session_status() !== PHP_SESSION_ACTIVE) {
    session_start([
        'cookie_lifetime' => 86400, // Время жизни сессии (24 часа)
        'cookie_secure' => false,   // Для локальной сети можно отключить
        'cookie_httponly' => true   // Защита от XSS
    ]);
}
?>



mysite.my\chat\includes\storage.php

Содержимое файла storage.php:
<?php
function createClient($chatId, $clientName) {
    $clientInfo = [
        'name' => $clientName,
        'ip' => getClientIP(),
        'hostname' => @gethostbyaddr(getClientIP()) ?: 'Неизвестный хост',
        'created_at' => date('Y-m-d H:i:s'),
        'status' => 'Открыт',
        'last_activity' => date('Y-m-d H:i:s'),
        'last_admin_view' => '1970-01-01 00:00:00' // Инициализация поля
    ];
    
    file_put_contents(CLIENTS_DIR . "$chatId.json", 
        json_encode($clientInfo, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}
function getMessages($chatId) {
    $filePath = CHATS_DIR . "$chatId.json";
    if (!file_exists($filePath)) {
        return [];
    }
    $content = file_get_contents($filePath);
    return json_decode($content, true) ?: [];
}
function saveMessage($chatId, $message, $isAdmin = false, $image = null, $adminName = null) {
    $filePath = CHATS_DIR . "$chatId.json";
    $messageData = [
        'time' => date('Y-m-d H:i:s'),
        'isAdmin' => $isAdmin,
        'message' => $message,
        'image' => $image,
        'adminName' => $adminName
    ];
    if ($image && !file_exists(ROOT_DIR . $image)) {
        error_log("storage.php: Указанный файл изображения не существует: " . ROOT_DIR . $image);
        $image = null;
    }
    $messages = getMessages($chatId);
    $messages[] = $messageData;
    if (!file_put_contents($filePath, json_encode($messages, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
        error_log("storage.php: Ошибка сохранения сообщения в файл: $filePath.");
        return false;
    }
    return true;
}
function updateChatStatus($chatId, $status, $adminName = null) {
    $filePath = CLIENTS_DIR . "$chatId.json";
    if (!file_exists($filePath)) {
        error_log("Ошибка: Чат с ID $chatId не найден.");
        return false;
    }
    $clientInfo = json_decode(file_get_contents($filePath), true);
    
    if ($status === 'в работе' && $adminName) {
        $clientInfo['status'] = "в работе ($adminName)";
    } elseif ($status === 'closed' && $adminName) {
        $clientInfo['status'] = "Закрыт ($adminName)";
    } elseif ($status === 'open') {
        $clientInfo['status'] = "Открыт";
    }
    $clientInfo['last_activity'] = date('Y-m-d H:i:s');
    if ($adminName) {
        $clientInfo['admin'] = $adminName;
    }
    if (!file_put_contents($filePath, json_encode($clientInfo, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
        error_log("Ошибка: Не удалось обновить статус чата $chatId.");
        return false;
    }
    return true;
}
function getChatStatus($chatId) {
    $filePath = CLIENTS_DIR . "$chatId.json";
    if (!file_exists($filePath)) {
        return 'closed'; // По умолчанию считаем чат закрытым, если файл не найден
    }
    $clientInfo = json_decode(file_get_contents($filePath), true);
    return $clientInfo['status'] ?? 'closed';
}
function closeChat($chatId, $adminName) {
    return updateChatStatus($chatId, 'closed', $adminName);
}
function clearChat($chatId) {
    $filePath = CHATS_DIR . "$chatId.json";
    if (!file_exists($filePath)) {
        return false;
    }
    return file_put_contents($filePath, json_encode([], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}
function updateLastViewTime($chatId) {
    $clientFile = CLIENTS_DIR . "$chatId.json";
    if (!file_exists($clientFile)) return false;
    
    $clientInfo = json_decode(file_get_contents($clientFile), true);
    $clientInfo['last_admin_view'] = date('Y-m-d H:i:s');
    
    return file_put_contents($clientFile, 
        json_encode($clientInfo, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}
?>



mysite.my\chat\includes\upload_functions.php

Содержимое файла upload_functions.php:
<?php
function handleFileUpload($file) {
    if ($file['error'] !== UPLOAD_ERR_OK) {
        return "Ошибка загрузки файла: " . $file['error'];
    }

    // Проверка размера файла
    if ($file['size'] > MAX_FILE_SIZE) {
        return "Размер файла превышает допустимые 5 МБ.";
    }

    // Проверка типа файла
    $finfo = new finfo(FILEINFO_MIME_TYPE);
    $mime = $finfo->file($file['tmp_name']);
    $allowedMimes = ['image/jpeg', 'image/png', 'image/gif'];

    if (!in_array($mime, $allowedMimes)) {
        return "Недопустимый тип файла. Разрешены только JPG, PNG и GIF.";
    }

       // Генерация уникального имени файла
    $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
    $fileName = uniqid() . ".$ext";
    $dest = UPLOAD_DIR . $fileName;

    if (move_uploaded_file($file['tmp_name'], $dest)) {
        // Установка прав в зависимости от ОС
        $os = PHP_OS_FAMILY;
        
        if ($os === 'Windows') {
            // Для Windows: полный доступ через icacls
            $command = 'icacls "' . $dest . '" /grant IIS_IUSRS:(F)';
            exec($command, $output, $returnCode);
            
            if ($returnCode !== 0) {
                error_log("Windows: Ошибка установки прав: " . implode("\n", $output));
            }
        } elseif ($os === 'Linux') {
            // Для Linux: устанавливаем права 0644 (rw-r--r--)
            if (!chmod($dest, 0644)) {
                error_log("Linux: Ошибка установки прав для файла: " . $dest);
            }
            
            // Дополнительно: меняем владельца (требует прав sudo)
            // $webUser = 'www-data'; // Пользователь веб-сервера
            // if (!chown($dest, $webUser)) {
            //     error_log("Linux: Ошибка смены владельца для файла: " . $dest);
            // }
        }

        return '/chat/uploads/' . $fileName;
    } else {
        return "Ошибка при загрузке файла.";
    }
}
?>



mysite.my\chat\logs\error.log [Пропущено по расширению]


mysite.my\chat\logs\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>




mysite.my\chat\uploads\67dc6e1bb2729.png [Пропущено по расширению]


mysite.my\chat\uploads\index.php

Содержимое файла index.php:
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'curl') !== false || 
    strpos($_SERVER['HTTP_USER_AGENT'], 'wget') !== false) {
    // Перенаправляем curl и wget на альтернативный URL
	header('HTTP/1.1 204 No Content');
    exit;
}
// Получаем текущий протокол (http или https)
$protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https://' : 'http://';

// Получаем текущий домен
$host = $_SERVER['HTTP_HOST'];

// Формируем полный URL для перенаправления
$redirectUrl = $protocol . $host . '/chat/client';

// Перенаправляем на нужный URL
header('Location: ' . $redirectUrl);
exit;
?>



